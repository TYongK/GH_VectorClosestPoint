using System;
using System.Collections;
using System.Collections.Generic;

using Rhino;
using Rhino.Geometry;

using Grasshopper;
using Grasshopper.Kernel;
using Grasshopper.Kernel.Data;
using Grasshopper.Kernel.Types;



/// <summary>
/// This class will be instantiated on demand by the Script component.
/// </summary>
public class Script_Instance : GH_ScriptInstance
{
#region Utility functions
  /// <summary>Print a String to the [Out] Parameter of the Script component.</summary>
  /// <param name="text">String to print.</param>
  private void Print(string text) { /* Implementation hidden. */ }
  /// <summary>Print a formatted String to the [Out] Parameter of the Script component.</summary>
  /// <param name="format">String format.</param>
  /// <param name="args">Formatting parameters.</param>
  private void Print(string format, params object[] args) { /* Implementation hidden. */ }
  /// <summary>Print useful information about an object instance to the [Out] Parameter of the Script component. </summary>
  /// <param name="obj">Object instance to parse.</param>
  private void Reflect(object obj) { /* Implementation hidden. */ }
  /// <summary>Print the signatures of all the overloads of a specific method to the [Out] Parameter of the Script component. </summary>
  /// <param name="obj">Object instance to parse.</param>
  private void Reflect(object obj, string method_name) { /* Implementation hidden. */ }
#endregion

#region Members
  /// <summary>Gets the current Rhino document.</summary>
  private readonly RhinoDoc RhinoDocument;
  /// <summary>Gets the Grasshopper document that owns this script.</summary>
  private readonly GH_Document GrasshopperDocument;
  /// <summary>Gets the Grasshopper script component that owns this script.</summary>
  private readonly IGH_Component Component;
  /// <summary>
  /// Gets the current iteration count. The first call to RunScript() is associated with Iteration==0.
  /// Any subsequent call within the same solution will increment the Iteration count.
  /// </summary>
  private readonly int Iteration;
#endregion

  /// <summary>
  /// This procedure contains the user code. Input parameters are provided as regular arguments,
  /// Output parameters as ref arguments. You don't have to assign output parameters,
  /// they will have a default value.
  /// </summary>
  private void RunScript(Curve curve_Closed, Point3d point_BasePoint, ref object A)
  {

    A = unitVector_closestPoint_BasePoint(curve_Closed, point_BasePoint);

  }

  // <Custom additional code> 
  static Point3d ClosestPoint(Curve curve_Closed, Point3d point_BasePoint)
  {

    double par;

    curve_Closed.ClosestPoint(point_BasePoint, out par);

    return curve_Closed.PointAt(par);;
  }

  static Vector3d unitVector_closestPoint_BasePoint(Curve curve_Closed, Point3d point_BasePoint)
  {

    Point3d second_Point = ClosestPoint(curve_Closed, point_BasePoint);

    Vector3d result_Vector = new Vector3d(second_Point.X - point_BasePoint.X, second_Point.Y - point_BasePoint.Y, second_Point.Z - point_BasePoint.Z);

    result_Vector.Unitize();

    return result_Vector;
  }

  // </Custom additional code> 
}
